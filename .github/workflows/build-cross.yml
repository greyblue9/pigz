name: Cross-Build C/C++

on:
  push:
  pull_request:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["arm64:aarch64-linux-gnu", "armhf:arm-linux-gnueabihf", "armel:arm-linux-gnueabi", "mips:mips-linux-gnu", "mips64el:mips64el-linux-gnuabi64", "i686:i686-linux-gnu/i386-amd64", "amd64:x86_64-linux-gnu"]
      fail-fast: false
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set platform variables
      run: |
           arches="${{ matrix.arch }}"
           arch="${arches%%/*}"
           arch="${arch%%:*}"
           gcc_arch="${arches%%/*}"
           gcc_arch="${gcc_arch: ${#arch}+1}"
           libc_arch="${arches##*/}"
           deb_arch="${gcc_arch//_/-}"
           [ "x$libc_arch" = "x$arches" ] && libc_arch="$deb_arch"
           libc6_arch="${arch//i686/i386}"
           typeset -p arches arch gcc_arch libc_arch deb_arch
           #
           echo "ARCH=$arch" >> $GITHUB_ENV
           echo "DEB_ARCH=$deb_arch" >> $GITHUB_ENV
           echo "GCC_ARCH=$gcc_arch" >> $GITHUB_ENV
           echo "LIBC_ARCH=$libc_arch" >> $GITHUB_ENV
           echo "LIBC6_ARCH=$libc6_arch" >> $GITHUB_ENV
    - name: More deps
      run: |
           sudo dpkg --add-architecture ${{ env.ARCH }} || sudo dpkg --force-architecture ${{ env.ARCH }} || true
           sudo apt search "^binutils-.*" 
           sudo apt search "^linux-libc.*" 
           sudo apt search "^libc.*-dev-" 
           sudo apt install -y -y --no-install-recommends \
           \
           remake libc6-dev \
           \
           gcc-${{ env.DEB_ARCH }} \
           binutils-${{ env.DEB_ARCH }} \
           \
           libc6-dev-${{ env.LIBC6_ARCH }}-cross \
           linux-libc-dev \
           zlib1g-dev ;
           sudo apt install -y -y --no-install-recommends \
              linux-libc-dev-${{ env.ARCH }}-cross \
              || true
           sudo apt install -y -y --no-install-recommends \
              linux-libc-dev-${{ env.GCC_ARCH }}-cross \
              || true
           sudo apt install -y -y --no-install-recommends \
              linux-libc-dev-${{ env.DEB_ARCH }}-cross \
              || true
           sudo apt install -y -y --no-install-recommends \
              linux-libc-dev-${{ env.LIBC_ARCH }}-cross \
              || true
           sudo apt install -y -y  --install-recommends zlib1g-dev:${{ env.ARCH }}/unstable || true
           wget "http://ftp.de.debian.org/debian/pool/main/z/zlib/zlib1g-dev_1.2.11.dfsg-1_${{ env.LIBC6_ARCH }}.deb"
           ar x zlib1g-dev_1.2.11.dfsg-1_${{ env.LIBC6_ARCH }}.deb data.tar.xz
           ls -lA -- data.*
           sudo tar -xvf data.tar* -C / --no-overwrite-dir
    - name: Autogenerate
      run: |
           autogen="$( find "$PWD" -type f -a "(" -iname "autogen*.sh" -o -iname "bootstrap*.sh" ")" | head -1 )"
           if [ -n "$autogen" ]; then
             autogen_fn="${autogen##*/}"
             autogen_dir="${autogen: 0:${#autogen}-${#autogen_fn}}"
             autogen_dir="${autogen_dir%%/}"
             if [ -d "$autogen_dir" ]; then
               chmod 0755 "$autogen"
               cd "$autogen_dir" && bash "./$autogen_fn"
             else true
             fi
           else
             [ -e configure.ac -o -e Makefile.am ] \
               && apt install -y -y --no-install-recommends \
                  m4 autoconf automake libtool || true
             [ -e configure.ac -o -e Makefile.am ] \
               && autoreconf -fiv || true
           fi
    - name: Configure build
      run: |
           set -- PREFIX=/usr \
           CROSS_COMPILE=${{ env.GCC_ARCH }}- \
           CROSS=${{ env.GCC_ARCH }}- \
           CROSS_TOOLS=${{ env.GCC_ARCH }}- \
           CROSSCOMPILE=${{ env.GCC_ARCH }}- \
           cross_compile=${{ env.GCC_ARCH }}- \
           BUILD_CC=${{ env.GCC_ARCH }}-gcc \
           BUILD_CXX=${{ env.GCC_ARCH }}-g++ \
           BUILD_BINUTILS=${{ env.GCC_ARCH }}- \
           CC=${{ env.GCC_ARCH }}-gcc \
           CXX=${{ env.GCC_ARCH }}-g++ \
           AR=${{ env.GCC_ARCH }}-gcc-ar \
           GCC_AR=${{ env.GCC_ARCH }}-gcc-ar \
           LD=${{ env.GCC_ARCH }}-ld \
           NM=${{ env.GCC_ARCH }}-nm \
           BINUTILS=${{ env.GCC_ARCH }}- \
           "LDFLAGS=-L/usr/lib/${{ env.GCC_ARCH }}/ -L/lib/${{ env.GCC_ARCH }}/ -Wl,--rpath-link,/usr/lib/${{ env.GCC_ARCH }}/" \
           "CFLAGS=-O1 -ggdb3 -gdwarf-4 -ffunction-sections -fdata-sections -frecord-gcc-switches -grecord-gcc-switches -static-libgcc -static " \
           "CXXFLAGS=-O1 -ggdb3 -gdwarf-4 -ffunction-sections -fdata-sections -frecord-gcc-switches -grecord-gcc-switches -static-libgcc -static-libstdc++ -static " \
           CROSS_COMPILING=t \
           cross_compiling=t \
           V=1 VERBOSE=1 VERBOSE_MAKEFILE=1 \
           ;
           if [ -e configure ]; then
             chmod 755 configure
             env "$@" bash ./configure --prefix=/usr "$@"
           else
             true
           fi
    - name: Build with make
      run: |
           set -- PREFIX=/usr \
           CROSS_COMPILE=${{ env.GCC_ARCH }}- \
           CROSS=${{ env.GCC_ARCH }}- \
           CROSS_TOOLS=${{ env.GCC_ARCH }}- \
           CROSSCOMPILE=${{ env.GCC_ARCH }}- \
           cross_compile=${{ env.GCC_ARCH }}- \
           BUILD_CC=${{ env.GCC_ARCH }}-gcc \
           BUILD_CXX=${{ env.GCC_ARCH }}-g++ \
           BUILD_BINUTILS=${{ env.GCC_ARCH }}- \
           CC=${{ env.GCC_ARCH }}-gcc \
           CXX=${{ env.GCC_ARCH }}-g++ \
           AR=${{ env.GCC_ARCH }}-gcc-ar \
           GCC_AR=${{ env.GCC_ARCH }}-gcc-ar \
           LD=${{ env.GCC_ARCH }}-ld \
           NM=${{ env.GCC_ARCH }}-nm \
           BINUTILS=${{ env.GCC_ARCH }}- \
           "LDFLAGS=-L/usr/lib/${{ env.GCC_ARCH }}/ -L/lib/${{ env.GCC_ARCH }}/ -Wl,--rpath-link,/usr/lib/${{ env.GCC_ARCH }}/" \
           "CFLAGS=-O1 -ggdb3 -gdwarf-4 -ffunction-sections -fdata-sections -frecord-gcc-switches -grecord-gcc-switches -static-libgcc -static " \
           "CXXFLAGS=-O1 -ggdb3 -gdwarf-4 -ffunction-sections -fdata-sections -frecord-gcc-switches -grecord-gcc-switches -static-libgcc -static-libstdc++ -static " \
           CROSS_COMPILING=t \
           cross_compiling=t \
           V=1 VERBOSE=1 VERBOSE_MAKEFILE=1 \
           ;
           DESTDIR="$PWD/out/${{ env.GCC_ARCH }}"
           mkdir -p "$DESTDIR"
           set -- "$@" "DESTDIR=$DESTDIR" \
           ;
           env "$@" remake --trace -e "$@"
           if env "$@" remake --trace -e --targets "$@" | grep -Fwe install ; then
             env "$@" remake --trace -e install "$@"
           else true
           fi
           if env "$@" remake --trace -e --targets "$@" | grep -Fwe dist ; then
             env "$@" remake --trace -e dist "$@"
           else true
           fi
           env "$@" remake --trace -e "$@"
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: output-${{ env.DEB_ARCH }}
        path: ./**